#!/usr/bin/env node

'use strict';

var request = require('superagent'),
    debug = require('debug')('client'),
    colors = require('colors'),
    Listener = require('../lib/listener'),
    commander = require('commander');

commander.version('0.1.0')
    .option('-r, --remote [url]', 'Remote callback server.')
    .option('-f, --forward [host]', 'Forward incoming request to the provided host. [http://localhost:3000]')
    .option('-k, --key <key>', 'Application key generated by "refresh".')
    .option('-s, --secret <secret>', 'Application secret generated by "refresh".\n')
    .option('refresh <username:password>', 'Get a new application key and secret.')
    .option('listen', 'Listen and wait for callbacks.')
    .parse(process.argv);


/*
 * some global configs
 */
var server = commander.remote || 'http://localhost:3001';
debug('Using remote callback server %s', server);

var forward = '';
if (commander.forward) {
    forward = typeof commander.forward === 'string' ? commander.forward : 'http://localhost:3000';
    debug('Forwarding incoming request to %s', forward);
}

var listener = typeof commander.listen === 'string' ? commander.listen : 'http://localhost:3000';
debug('Using %s to dispatch incoming requests locally.', listener);

var appKey = commander.key;
if (appKey) debug('Using app key "%s".', appKey);

var appSecret = commander.secret;
if (appSecret) debug('Using app secret "%s".', appSecret);


/*
 * actual functionality
 */
function refresh(user, password) {
    debug('Refresh callback');

    request.get(server + '/credentials').auth(user, password).end(function (error, result) {
        if (error) {
            console.error('Unable to reach the server.', error);
            return;
        }

        if (!result.ok) {
            console.error('No credentials generated for user "%s". Try to refresh your application key.', user);
            process.exit(1);
        }

        console.log('Key:\t%s', result.body.appKey);
        console.log('Secret:\t%s', result.body.appSecret);
    });
}

function listen() {
    listener = new Listener(server, appKey, appSecret);

    listener.on('connect', function () {
        console.log('Connected to server %s'.green, server);
    });
    listener.on('disconnect', function () {
        console.log('Disconnected from server %s'.yellow, server);
    });
    listener.on('callback', function (data) {
        console.log('Received callback:'.bold, data);
    });
    listener.on('auth', function (status) {
        if (status) {
            console.log('Registering with the provided access token succeeded.'.green);
            console.log('Now listening on callbacks ...'.cyan);
        } else {
            console.error('Registering with the provided access token failed.'.red);
            console.log('Try to create a new application token via `./bin/client refresh <access token>`');
            process.exit(1);
        }
    });

    listener.start();
}


/*
 * Main program flow starts here
 */
if (commander.listen) {
    if (!appKey || !appSecret) {
        console.error('The listen command needs a --key and a --secret.');
        commander.help();
        return;
    }

    listen();
} else if (commander.refresh) {
    var parts = commander.refresh.split(':');
    if (parts.length !== 2) {
        console.error('Refresh takes a username:password tuple.');
        commander.help();
    }

    refresh(parts[0], parts[1]);
} else {
    commander.help();
}
